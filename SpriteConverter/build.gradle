apply plugin: "java"

sourceCompatibility = 1.6
sourceSets.main.java.srcDirs = ["src/"]

project.ext.mainClassName = "de.project.ice.spriteconverter.SpriteConverter"
project.ext.assetsDir = new File("../android/assets");

task run(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
}

task pack(dependsOn: classes, type: JavaExec) {
    main = "de.project.ice.spriteconverter.Packer"
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    args = [new File("../sprites").absolutePath, new File(assetsDir, "spritesheets").absolutePath]
}

task dist(type: Jar) {
    from files(sourceSets.main.output.classesDir)
    from { configurations.compile.collect { zipTree(it) } }
    from files(project.assetsDir);

    manifest {
        attributes 'Main-Class': project.mainClassName
    }
}

dependencies {
    compile "com.badlogicgames.gdx:gdx-tools:$gdxVersion"
}

jar {
    manifest {
        attributes 'Main-Class': project.mainClassName
    }
}

dist.dependsOn classes

eclipse {
    project {
        name = appName + "-spriteconverter"
        linkedResource name: 'assets', type: '2', location: 'PARENT-1-PROJECT_LOC/android/assets'
    }
}

task afterEclipseImport(description: "Post processing after project generation", group: "IDE") {
    doLast {
        def classpath = new XmlParser().parse(file(".classpath"))
        new Node(classpath, "classpathentry", [kind: 'src', path: 'assets']);
        def writer = new FileWriter(file(".classpath"))
        def printer = new XmlNodePrinter(new PrintWriter(writer))
        printer.setPreserveWhitespace(true)
        printer.print(classpath)
    }
}